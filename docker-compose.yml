services:
  # PostgreSQL for UserService
  userdb:
    image: postgres:16-alpine
    container_name: userdb
    environment:
      POSTGRES_USER: ${USERDB_USER}
      POSTGRES_PASSWORD: ${USERDB_PASSWORD}
      POSTGRES_DB: ${USERDB_NAME}
    ports:
      - "${USERDB_PORT}:5432"
    volumes:
      - userdb_data:/var/lib/postgresql/data
    networks:
      - booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERDB_USER} -d ${USERDB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for BookingService
  bookingdb:
    image: postgres:16-alpine
    container_name: bookingdb
    environment:
      POSTGRES_USER: ${BOOKINGDB_USER}
      POSTGRES_PASSWORD: ${BOOKINGDB_PASSWORD}
      POSTGRES_DB: ${BOOKINGDB_NAME}
    ports:
      - "${BOOKINGDB_PORT}:5432"
    volumes:
      - bookingdb_data:/var/lib/postgresql/data
    networks:
      - booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BOOKINGDB_USER} -d ${BOOKINGDB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for PaymentService
  paymentdb:
    image: mongo:7.0
    container_name: paymentdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PAYMENTDB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${PAYMENTDB_PASSWORD}
      MONGO_INITDB_DATABASE: ${PAYMENTDB_NAME}
    ports:
      - "${PAYMENTDB_PORT}:27017"
    volumes:
      - paymentdb_data:/data/db
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Seq (Optional) - Structured logging and monitoring
  seq:
    image: datalust/seq:latest
    container_name: seq
    environment:
      ACCEPT_EULA: Y
      SEQ_FIRSTRUN_ADMINPASSWORD: ${SEQ_ADMIN_PASSWORD:-Admin@2025!SeqPass}
    ports:
      - "5341:80"     # Seq UI
      - "5342:5342"   # Ingestion endpoint
    volumes:
      - seq_data:/data
    networks:
      - booking-network
    restart: unless-stopped

volumes:
  userdb_data:
    driver: local
  bookingdb_data:
    driver: local
  paymentdb_data:
    driver: local
  rabbitmq_data:
    driver: local
  seq_data:
    driver: local

networks:
  booking-network:
    driver: bridge
